import os
import sys
import json
import time
import traceback
import asyncio
from unittest import result
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from ai_mcp.planner import generate_ai_plan
from ai_mcp.executor import execute_plan
from ai_mcp.mcp_client import extract_page_context


def main():
    print("What would you like me to do?")
    goal = input("> ").strip()
    if not goal:
        print("Please enter a valid goal (e.g., 'Find the cheapest hat').")
        return

    print(f"\nAI Goal: {goal}")
    headless = False
    trace = {"goal": goal, "timestamps": {}, "errors": []}

    try:
        print("- Extracting page context using Playwright MCP...")
        start = time.time()
        context_data = asyncio.run(extract_page_context(headless=headless))
        trace["timestamps"]["context_extraction"] = round(time.time() - start, 2)

        if not context_data:
            print("- MCP did not return context data.")
            return

        print("- Generating AI plan based on MCP context...")
        start = time.time()
        plan = generate_ai_plan(goal, context_data)
        trace["timestamps"]["plan_generation"] = round(time.time() - start, 2)

        if not plan.get("steps"):
            print("- No valid steps generated by AI.")
            trace["errors"].append("- No steps generated by planner.")
            return

        print(f"\nAI Plan received: {len(plan['steps'])} steps")
        for i, step in enumerate(plan["steps"], 1):
            print(f"   Step {i}: {step.get('action')} → {step.get('selector')}")

        print("\nExecuting the plan...")
        start = time.time()
        result = asyncio.run(
            execute_plan(plan["steps"], goal=goal, headless=headless, llm_fn=generate_ai_plan)
        )
        trace["timestamps"]["execution"] = round(time.time() - start, 2)
        trace["result"] = result

        print("\nExecution completed.")
        if isinstance(result, dict) and "data" in result:
            print(f"Extracted {len(result['data'])} items.")
            if result.get("cheapest"):
                c = result["cheapest"]
                print(f"\nResult: ${c['price']:.2f} — {c['title']}")
                print(f"\n{c.get('link')}")
        else:
            print("\nExecution result:", result)

    except Exception as e:
        error_msg = f"Fatal error: {str(e)}"
        print(error_msg)
        trace["errors"].append(error_msg)
        trace["traceback"] = traceback.format_exc()

    finally:
        with open("ai_trace.json", "w") as f:
            json.dump(trace, f, indent=2)
        print("\nFull trace saved to ai_trace.json.")


if __name__ == "__main__":
    main()
